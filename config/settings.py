"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import environ
from config.platform_helpers import decode
from platformshconfig import Config


config = Config()

env = environ.Env(
    DEBUG=(bool, False),
    HOST=(str, ""),
    DJANGO_SECRET_KEY=(str, ''),
    FORCE_INSECURE_OAUTH=(bool, False),
    PLATFORM_APPLICATION_NAME=(bool, None),
    PLATFORM_ENVIRONMENT=(str, None),
    PLATFORM_RELATIONSHIPS=(str, None),
    PLATFORM_SMTP_HOST=(str, 'localhost'),
    SEGMENT_WRITE_KEY=(str, config.variable("SEGMENT_WRITE_KEY", None)),
    LOG_SEGMENT_EVENTS=(str, None),
)

environ.Env().read_env()

if env('FORCE_INSECURE_OAUTH'):
    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')  # noqa

# This variable must always match the primary database relationship name,
#   configured in .platform.app.yaml.
PLATFORMSH_DB_RELATIONSHIP = "database"

# Import some Platform.sh settings from the environment.
# The following block is only applied within Platform.sh environments
# That is, only when this Platform.sh variable is defined
DEBUG = env('DEBUG')

if (os.getenv('PLATFORM_APPLICATION_NAME') is None):
    # Database
    # https://docs.djangoproject.com/en/4.2/ref/settings/#databases

    LOG_PATH = 'app.log'  # local and CD

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:

    # platformsh env -- for some reason can't get this from env variables at
    # build time
    LOG_PATH = '/var/log/app.log'
    # Redefine the static root based on the Platform.sh directory
    # See https://docs.djangoproject.com/en/4.1/ref/settings/#static-root
    if (os.getenv('PLATFORM_APP_DIR') is not None):
        STATIC_ROOT = os.path.join(os.getenv('PLATFORM_APP_DIR'), 'static')

    # PLATFORM_PROJECT_ENTROPY is unique to your project
    # Use it to define define Django's SECRET_KEY
    # See https://docs.djangoproject.com/en/4.1/ref/settings/#secret-key
    if (os.getenv('PLATFORM_PROJECT_ENTROPY') is not None):
        SECRET_KEY = os.getenv('PLATFORM_PROJECT_ENTROPY')

    # Database service configuration, post-build only
    # As services aren't available during the build
    if (os.getenv('PLATFORM_ENVIRONMENT') is not None):
        platformRelationships = decode(os.getenv('PLATFORM_RELATIONSHIPS'))
        db_settings = platformRelationships[PLATFORMSH_DB_RELATIONSHIP][0]
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': db_settings['path'],
                'USER': db_settings['username'],
                'PASSWORD': db_settings['password'],
                'HOST': db_settings['host'],
                'PORT': db_settings['port'],
            },
            'sqlite': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            }
        }

ALLOWED_HOSTS = [
    'localhost', '127.0.0.1', '.platformsh.site',
    # Add production domain here (e.g. '.my-domain.com')
]

if os.getenv('HOST'):
    ALLOWED_HOSTS.extend([os.getenv('HOST')])
else:
    ALLOWED_HOSTS.extend(['.ngrok.io', '.ngrok-free.app'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party libraries,
    'django_extensions',
    'django_celery_results',
    # Our apps
    'common',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
AUTH_USER_MODEL = 'common.User'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "staticfiles"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        "null": {
            "class": "logging.NullHandler",
        },
        'logfile': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_PATH,
        },
    },
    'root': {
        'handlers': ['console', 'logfile'],
        'level': 'WARN',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARN',
            'formatter': 'verbose'
        },
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
    },
}

CSRF_TRUSTED_ORIGINS = []

CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_CACHE_BACKEND = 'default'
CELERY_RESULT_EXTENDED = True

# django setting.
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table',
    }
}

SEGMENT_WRITE_KEY = env('SEGMENT_WRITE_KEY')
LOG_SEGMENT_EVENTS = env('LOG_SEGMENT_EVENTS')

if DEBUG and LOG_SEGMENT_EVENTS:
    LOGGING['loggers']['segment'] = {
        'handlers': ['console'],
        'level': 'DEBUG',
        'propagate': True,
    }

EMAIL_HOST = env('PLATFORM_SMTP_HOST')
EMAIL_PORT = 25
